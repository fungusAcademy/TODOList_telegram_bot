import pytest
from unittest.mock import AsyncMock, patch
from handlers.commands import add_task, list_tasks

@pytest.mark.asyncio
async def test_add_task_handler_success(mock_message):
    """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    with patch('handlers.commands.add_task') as mock_add:
        mock_add.return_value = 1
        
        await add_task(mock_message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–≤–∞–ª–∞—Å—å
        mock_add.assert_called_once_with(12345, "Test task")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª
        mock_message.answer.assert_called_once_with("‚úÖ –ó–∞–¥–∞—á–∞ #1 –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É: Test task")

@pytest.mark.asyncio
async def test_add_task_handler_empty_text():
    """–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π –∑–∞–¥–∞—á–∏"""
    message = AsyncMock()
    message.from_user.id = 12345
    message.text = "/add"
    message.replace.return_value = ""
    
    await add_task(message)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª –æ—à–∏–±–∫–æ–π
    message.answer.assert_called_once_with("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")

@pytest.mark.asyncio
async def test_list_tasks_handler_empty():
    """–¢–µ—Å—Ç –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    message = AsyncMock()
    message.from_user.id = 12345
    
    with patch('handlers.commands.list_tasks') as mock_get:
        mock_get.return_value = []
        
        await list_tasks(message)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        message.answer.assert_called_once_with("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á")