from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from services.task_service import TaskService
from handlers.inline_kbs import ease_link_kb

router = Router()
WELCOME_TEXT = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–¥–∞—á.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/help - –ø–æ–º–æ—â—å

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
    """
HELP_TEXT = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

‚Ä¢ –ù–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /add + —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
‚Ä¢ –ù–∞–∂–º–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /list —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ù–∞–∂–º–∏ "—É–¥–∞–ª–∏—Ç—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /del —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø—Ä–æ–ø–∞–¥—É—Ç)
    """

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")], 
        [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"), KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)


# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(Command('start'))
async def cmd_start(message: types.Message):
    await message.answer(WELCOME_TEXT, reply_markup=keyboard)
    await message.answer("–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã: ", reply_markup=ease_link_kb())

# –ö–æ–º–∞–Ω–¥–∞ /help
@router.message(Command('help'))
@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    await message.answer(HELP_TEXT)

# –∫–æ–º–∞–Ω–¥–∞ /add
@router.message(Command('add'))
# @router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message, task_service: TaskService):
    if message.text is not None:
        task_text = message.text.replace('/add', '').strip()
        # –î–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ cmd_help –≤ —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if  not len(task_text): return
        if message.from_user is not None:
            task = await task_service.create_task(task_text, message.from_user.id)
            await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task.text}")
    # if message.from_user is not None:
    #     user_id = message.from_user.id
    # else:
    #     pass
    # if user_id not in user_tasks:
    #     user_tasks[user_id] = []
    
    # # –ü—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∑–∞–¥–∞—á—É
    # await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:")

# –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
@router.message(Command('list'))
# @router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def list_tasks(message: types.Message, task_service: TaskService):
    if message.from_user is not None:
        tasks = await task_service.get_user_tasks(message.from_user.id)
        if not tasks:
            await message.answer("üìù –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
            return
        # ------ –°–ª–µ–¥—É–µ—Ç –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –º–æ–¥—É–ª—å View
        tasks_text = "\n".join([f"{'‚úÖ' if task.is_done else '‚è≥'} {task.id}: {task.text}" for task in tasks])
        # ------
        await message.answer(f"üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á: \n{tasks_text}")
    # if message.from_user is not None:
    #     user_id = message.from_user.id
    # else: 
    #     pass
    # if user_id not in user_tasks or not user_tasks[user_id]:
    #     await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
    #     return
    # tasks_list = "\n".join([f"‚Ä¢ {task}" for task in user_tasks[user_id]])
    # await message.answer(f"üìã –í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n{tasks_list}")

# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
@router.message(Command('del'))
# @router.message(lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
async def del_tasks(message: types.Message, task_service: TaskService):
    # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ
    if message.text is not None:
        try:
            id = int(message.text.replace('/del', '').strip())
        except:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!")
            return
        await task_service.delete_task(id)
        await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

    # --------------------------------
    # if message.from_user is not None:
    #     user_id = message.from_user.id
    # else:
    #     pass
    # if user_id not in user_tasks or not user_tasks[user_id]:
    #     await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç")
    #     return
    # user_tasks.clear()
    # await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –æ—á–∏—â–µ–Ω")

# @router.message(lambda message: message.text == "–ò–Ω–ª–∞–π–Ω")
# async def get_inline_btn_link(message: types.Message): 
#     await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=ease_link_kb())

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
# @router.message(lambda message: message.text and message.text not in ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "–ü–æ–º–æ—â—å"])
# async def process_task_input(message: types.Message):
#     if message.from_user is not None:
#         user_id = message.from_user.id
#     else:
#         pass
#     task_text = message.text
    
#     if user_id not in user_tasks:
#         user_tasks[user_id] = []
    
#     user_tasks[user_id].append(task_text)
#     await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")