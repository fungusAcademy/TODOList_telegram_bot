from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from services.task_service import TaskService
from dependency_injector.wiring import Provide, inject
# from db_operations import add_task_to_db, get_user_tasks_from_db

router = Router()

WELCOME_TEXT = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–µ—Ç–∞ –∑–∞–¥–∞—á.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/add - –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/list - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/del - —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
/help - –ø–æ–º–æ—â—å

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!
    """
HELP_TEXT = """
üìã –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

‚Ä¢ –ù–∞–∂–º–∏ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /add + —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
‚Ä¢ –ù–∞–∂–º–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /list —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ù–∞–∂–º–∏ "—É–¥–∞–ª–∏—Ç—å" –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /del —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –ø—Ä–æ–ø–∞–¥—É—Ç)
    """

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")], 
        [KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"), KeyboardButton(text="–ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)

@router.message(Command('start'))
async def cmd_start(message: types.Message):
    # await message.answer(WELCOME_TEXT, reply_markup=keyboard)
    await message.answer(WELCOME_TEXT)

@router.message(Command('help'))
@router.message(lambda message: message.text == "–ü–æ–º–æ—â—å")
async def cmd_help(message: types.Message):
    await message.answer(HELP_TEXT)

@router.message(Command('add'))
@inject
# @router.message(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(
    message: types.Message,
    task_service: TaskService = Provide['task_service']
    ):
    if message.from_user is not None:
        user_id = message.from_user.id
    else:
        raise TypeError('user id is None')
    
    if message.text is not None:
        task_text = message.text.replace('/add', '').strip()
    else:
        raise TypeError('task text is None')
        
    if not task_text:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /add")
        return

    try:
        task_id = await task_service.create_task(user_id, task_text)
        await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ #{task_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É: {task_text}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É")
        print(f"–û—à–∏–±–∫–∞: {e}")

@router.message(Command('list'))
@inject
# @router.message(lambda message: message.text == "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
# Tasks now are printed in reverse order -_-
async def list_tasks(
    message: types.Message,
    task_service: TaskService = Provide['task_service']
    ):
    if message.from_user is not None:
        user_id = message.from_user.id
    else:
        raise TypeError('user id is None')
    
    try:
        tasks = await task_service.get_user_tasks(user_id)
        
        if not tasks:
            await message.answer("üì≠ –í –±–∞–∑–µ –Ω–µ—Ç –∑–∞–¥–∞—á")
            return
        
        tasks_list = "\n".join([f"‚Ä¢ {task.task_text} (ID: {task.id})" for task in tasks])
        await message.answer(f"üìã –ó–∞–¥–∞—á–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n{tasks_list}")
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã")
        print(f"–û—à–∏–±–∫–∞: {e}")

# @router.message(Command('del'))
# # @router.message(lambda message: message.text == "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á")
# async def del_tasks(message: types.Message, task_service: TaskService):
#     # –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞, –µ—Å–ª–∏ –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ
#     if message.text is not None:
#         try:
#             id = int(message.text.replace('/del', '').strip())
#         except:
#             await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–º–µ—Ç–∫–∏, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!")
#             return
#         await task_service.delete_task(id)
#         await message.answer(f"–ó–∞–¥–∞—á–∞ ‚Ññ{id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

# # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–¥–∞—á–∏
# @router.message(lambda message: message.text and message.text not in ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á", "–ü–æ–º–æ—â—å"])
# async def process_task_input(message: types.Message):
#     if message.from_user is not None:
#         user_id = message.from_user.id
#     else:
#         pass
#     task_text = message.text
    
#     if user_id not in user_tasks:
#         user_tasks[user_id] = []
    
#     user_tasks[user_id].append(task_text)
#     await message.answer(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")